<?php

/**
 * Created by PhpStorm.
 * User: Вован
 * Date: 28.06.2018
 * Time: 13:19
 */

use Myclass\Lowprice\LowPriceTable;

class HLBidList extends CBitrixComponent
{

    protected $errors = [];

    public function executeComponent()
    {
        try {
            $modules = ['highloadblock', 'iblock'];
            foreach ($modules as $module) {
                CModule::IncludeModule($module);
            }

            $this->MainMethod();

        } catch (Exception $e) {
            $this->__showError($e->getMessage());
        }

        $this->includeComponentTemplate();

        return parent::executeComponent(); // TODO: Change the autogenerated stub
    }

    public function MainMethod()
    {
        $user_id = CUser::getID();
        if ($user_id) {
            if (isset($this->arParams['ROWS_PER_PAGE']) && $this->arParams['ROWS_PER_PAGE'] > 0) {
                $nav = new \Bitrix\Main\UI\PageNavigation("page");
                $nav->allowAllRecords(true)
                    ->setPageSize($this->arParams['ROWS_PER_PAGE'])
                    ->initFromUri();

                $nav_params = [
                    'limit' => $nav->getLimit(),
                    'offset' => $nav->getOffset(),
                    'count_total' => true,
                ];

            } else {
                $arParams['ROWS_PER_PAGE'] = 0;
                $nav_params = [];
            }

            $params = [
                'select' => ['*'],
                'filter' => ['=UF_USER_ID' => $user_id],
            ];

            $parameters = array_merge($params, $nav_params);
            $result = LowPriceTable::getList($parameters);

            if ($this->arParams['ROWS_PER_PAGE'] > 0) {
                $nav->setRecordCount($result->getCount());
            }

            while ($row = $result->fetch()) {
                $arElements[] = $row;
            }

            $this->arResult['nav_object'] = $nav;
            $this->arResult['rows'] = $arElements;

        }
    }

    public function onPrepareComponentParams($arParams)
    {
        return parent::onPrepareComponentParams($arParams);
    }


}