<?php

use Myclass\Lowprice;

/**
 * Created by PhpStorm.
 * User: Вован
 * Date: 28.06.2018
 * Time: 20:47
 */
class HLBidAdminList extends CBitrixComponent
{


    public function executeComponent()
    {
        try {
            $this->includeModules();
            $this->MainMethod();
            $this->includeComponentTemplate();

        } catch (Exception $e) {
            $this->__showError($e->getMessage());
        }
        return parent::executeComponent(); // TODO: Change the autogenerated stub
    }


    private function MainMethod()
    {
        $arFilter = [];

        if (strlen($_REQUEST['del_filter'] <= 0) && strLen($_REQUEST["set_filter"]) > 0) {

            if (!empty($_REQUEST['artnumber'])) {
                $arFilter['=UF_ELEMENT_ID'] = $this->getIDByArtnumber($_REQUEST['artnumber']);
            }

            if (!empty($_REQUEST['status'])) {
                if ($_REQUEST['status'] == 2) {
                    $status = 1;
                } elseif ($_REQUEST['status'] == 1) {
                    $status = 0;
                }
                $arFilter['=UF_STATUS'] = $status;
            }


            if (!empty($_REQUEST['date_from'])) {
                $arFilter['>=UF_DATE'] = $_REQUEST['date_from'];
            }

            if (!empty($_REQUEST['date_to'])) {
                $arFilter['<=UF_DATE'] = $_REQUEST['date_to'];
            }

        } else if (strlen($_REQUEST['del_filter'] > 0)) {
            unset ($_REQUEST['artnumber']);
            unset ($_REQUEST['status']);
            unset ($_REQUEST['date_from']);
            unset ($_REQUEST['date_to']);
            unset ($_REQUEST['sort']);
        }

        $sortType  = 'DESC';
        if (!empty($_REQUEST['sort'])) {
            $sortId = 'UF_DATE';
            $sortType = ($_REQUEST["sort"] == "DATE_DESC" ? "DESC" : "ASC");
        }


        if ($this->arParams['ROWS_PER_PAGE'] && $this->arParams['ROWS_PER_PAGE'] > 0) {
            $nav = new \Bitrix\Main\UI\PageNavigation('page');
            $nav->allowAllRecords(true)
                ->setPageSize($this->arParams['ROWS_PER_PAGE'])
                ->initFromUri();

            $nav_params = [
                'count_total' => true,
                'offset' => $nav->getOffset(),
                'limit' => $nav->getLimit(),
            ];

            $this->arResult['nav_object'] = $nav;
        } else {
            $arParams['ROWS_PER_PAGE'] = 0;
            $nav_params = [];
        }

        $params = [
            'select' => ['*'],
            'filter' => $arFilter,
            'order' => ['ID' => $sortType]
        ];

        $parameters = array_merge($params, $nav_params);

        $result = Lowprice\LowPriceTable::getList($parameters);

        if ($this->arParams['ROWS_PER_PAGE'] && $this->arParams['ROWS_PER_PAGE'] > 0) {
            $nav->setRecordCount($result->getCount());
        }

        while ($row = $result->fetch()) {
            $arElements[] = $row;
        }

        $this->arResult['rows'] = $arElements;
    }

    private function includeModules()
    {
        $modules = ['highloadblock', 'iblock'];
        foreach ($modules as $module) {
            CModule::IncludeModule($module);
        }
    }

    private function getIDByArtnumber($artnumber)
    {
        $parameters['select'] = ['UF_ELEMENT_ID'];
        $result = Lowprice\LowPriceTable::getList($parameters);

        while ($row = $result->fetch()) {
            $arIds[] = $row['UF_ELEMENT_ID'];
        }

        $arIds = array_unique($arIds);

        $arFilter = [
            'CODE' => 'ARTNUMBER'
        ];

        foreach ($arIds as $element_id) {
            $result = CIBlockElement::GetProperty(2, $element_id, '', '', $arFilter);
            while ($prop = $result->Fetch()) {

                $str1 = $this->translit($artnumber);
                $str2 = $this->translit($prop['VALUE']);

                if ($str1 == $str2) {
                    $id = $element_id;
                }
            }
        }

        return $id;
    }

    private function translit($string)
    {
        $string = trim($string);
        $string = mb_strtolower($string);
        $string = strtr($string, ['а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'e', 'ж' => 'j', 'з' => 'z', 'и' => 'i', 'й' => 'y', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shch', 'ы' => 'y', 'э' => 'e', 'ю' => 'yu', 'я' => 'ya', 'ъ' => '', 'ь' => '']);
        return $string;
    }

}